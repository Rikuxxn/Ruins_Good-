//=============================================================================
//
// カメラ処理 [camera.cpp]
// Author : TANEKAWA RIKU
//
//=============================================================================
#include "camera.h"
#include "renderer.h"
#include "manager.h"

//=======================================
// コンストラクタ
//=======================================
CCamera::CCamera()
{
	// 値のクリア
	m_posV = INIT_VEC3;			// 視点
	m_posVDest = INIT_VEC3;		// 目的の視点
	m_posR = INIT_VEC3;			// 注視点
	m_posRDest = INIT_VEC3;		// 目的の注視点
	m_vecU = INIT_VEC3;			// 上方向ベクトル
	m_mtxProjection = {};		// プロジェクションマトリックス
	m_mtxView = {};				// ビューマトリックス
	m_rot = INIT_VEC3;			// 向き
	m_fDistance = 0.0f;			// 視点から注視点の距離
}
//=======================================
// デストラクタ
//=======================================
CCamera::~CCamera()
{
	// なし
}
//=======================================
// 初期化処理
//=======================================
HRESULT CCamera::Init(void)
{
	// 視点・注視点・上方向を設定する
	m_posV = D3DXVECTOR3(0.0f, 80.0f, -540.0f);
	m_posR = D3DXVECTOR3(0.0f, 80.0f, 0.0f);
	m_vecU = D3DXVECTOR3(0.0f, 1.0f, 0.0f);// 固定でいい
	m_rot = D3DXVECTOR3(0.0f, D3DX_PI, 0.0f);
	m_fDistance = sqrtf(
		((m_posV.x - m_posR.x) * (m_posV.x - m_posR.x)) +
		((m_posV.y - m_posR.y) * (m_posV.y - m_posR.y)) +
		((m_posV.z - m_posR.z) * (m_posV.z - m_posR.z)));

	return S_OK;
}
//=======================================
// 終了処理
//=======================================
void CCamera::Uninit(void)
{


}
//=======================================
// 更新処理
//=======================================
void CCamera::Update(void)
{
	// エディターカメラの処理
	EditCamera();
}
//=======================================
// カメラの設定処理
//=======================================
void CCamera::SetCamera(void)
{
	// デバイスの取得
	CRenderer* renderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = renderer->GetDevice();

	//ビューマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxView);

	//ビューマトリックスの作成
	D3DXMatrixLookAtLH(&m_mtxView,
		&m_posV,
		&m_posR,
		&m_vecU);

	//ビューマトリックスの設定
	pDevice->SetTransform(D3DTS_VIEW, &m_mtxView);

	//プロジェクションマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxProjection);

	//プロジェクションマトリックスの作成
	D3DXMatrixPerspectiveFovLH(&m_mtxProjection,
		D3DXToRadian(60.0f),						// 視野角
		(float)SCREEN_WIDTH / (float)SCREEN_HEIGHT, // アスペクト比
		1.0f,										// 近クリップ面
		2500.0f);									// 遠クリップ面

	//プロジェクションマトリックスの設定
	pDevice->SetTransform(D3DTS_PROJECTION, &m_mtxProjection);
}
//=======================================
// エディターカメラの処理
//=======================================
void CCamera::EditCamera(void)
{
	// キーボードの取得
	CInputKeyboard* pInputKeyboard = CManager::GetInputKeyboard();

	// マウスの取得
	CInputMouse* pInputMouse = CManager::GetInputMouse();

	// 現在のカーソル位置を取得
	POINT cursorPos;
	GetCursorPos(&cursorPos);

	// 前フレームからのマウス移動量を取得
	static POINT prevCursorPos = { cursorPos.x, cursorPos.y };
	float deltaX = (float)(cursorPos.x - prevCursorPos.x);
	float deltaY = (float)(cursorPos.y - prevCursorPos.y);

	// 現在のカーソル位置を保存（次のフレームでの比較用）
	prevCursorPos = cursorPos;

	// マウス感度
	const float mouseSensitivity = 0.004f;
	deltaX *= mouseSensitivity;
	deltaY *= mouseSensitivity;

	//====================================
	// マウスホイールでズームイン・アウト
	//====================================
	int wheel = pInputMouse->GetWheel();
	const float zoomSpeed = 5.0f;

	if (wheel != 0)
	{
		m_fDistance -= wheel * zoomSpeed;

		//// ズーム距離の制限
		//if (m_fDistance < 1.0f)
		//{
		//	m_fDistance = 1.0f;
		//}
		//if (m_fDistance > 100.0f)
		//{
		//	m_fDistance = 100.0f;
		//}
	}

	if (pInputKeyboard->GetPress(DIK_LALT) && pInputMouse->GetPress(0)) // 左クリック押しながらマウス移動 → 視点回転
	{
		m_rot.y += deltaX; // 水平回転
		m_rot.x += deltaY; // 垂直回転

		//角度の正規化
		if (m_rot.y > D3DX_PI)
		{
			m_rot.y -= D3DX_PI * 2.0f;
		}
		else if (m_rot.y < -D3DX_PI)
		{
			m_rot.y += D3DX_PI * 2.0f;
		}

		// 垂直回転の制限
		if (m_rot.x > 1.57f)
		{
			m_rot.x = 1.57f;
		}
		if (m_rot.x < -1.57f)
		{
			m_rot.x = -1.57f;
		}

		// 視点の更新（カメラの方向を適用）
		m_posV.x = m_posR.x + sinf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
		m_posV.y = m_posR.y + sinf(m_rot.x) * m_fDistance;
		m_posV.z = m_posR.z + cosf(m_rot.y) * cosf(m_rot.x) * m_fDistance;

	}
	else if (pInputMouse->GetPress(1)) // 右クリック押しながらマウス移動 → 注視点回転
	{
		m_rot.y += deltaX; // 水平回転
		m_rot.x += deltaY; // 垂直回転

		//角度の正規化
		if (m_rot.y > D3DX_PI)
		{
			m_rot.y -= D3DX_PI * 2.0f;
		}
		else if (m_rot.y < -D3DX_PI)
		{
			m_rot.y += D3DX_PI * 2.0f;
		}

		// 垂直回転の制限
		if (m_rot.x > 1.57f)
		{
			m_rot.x = 1.57f;
		}
		if (m_rot.x < -1.57f)
		{
			m_rot.x = -1.57f;
		}

		// 注視点の更新
		m_posR.x = m_posV.x - sinf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
		m_posR.y = m_posV.y - sinf(m_rot.x) * m_fDistance;
		m_posR.z = m_posV.z - cosf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
	}
	else
	{
		// 入力がない場合でもズーム反映のために視点を更新
		m_posV.x = m_posR.x + sinf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
		m_posV.y = m_posR.y + sinf(m_rot.x) * m_fDistance;
		m_posV.z = m_posR.z + cosf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
	}

	//if (pInputMouse->GetPress(2)) // 中クリック（ホイール押し）
	//{
	//	const float panSpeed = 10.0f;

	//	D3DXVECTOR3 right(
	//		cosf(m_rot.y),
	//		0.0f,
	//		sinf(m_rot.y)
	//	);
	//	D3DXVECTOR3 up(0.0f, 1.0f, 0.0f);

	//	D3DXVECTOR3 panMove = (-right * deltaX + up * deltaY) * panSpeed;

	//	m_posR += panMove;
	//	m_posV += panMove;
	//}

	// 注視点の更新
	m_posR.x = m_posV.x - sinf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
	m_posR.y = m_posV.y - sinf(m_rot.x) * m_fDistance;
	m_posR.z = m_posV.z - cosf(m_rot.y) * cosf(m_rot.x) * m_fDistance;
}
//=======================================
// 角度の取得
//=======================================
D3DXVECTOR3 CCamera::GetRot(void)
{
	return m_rot;
}
